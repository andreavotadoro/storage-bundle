parameters:
    datetime.class: \DateTime
    ped_storage.uploader:            "ped_storage.%storage_adapter%_media_handler"
    ped_storage.aws_s3.client.class: Aws\S3\S3Client
    ped_storage.media_handler.class: PaneeDesign\StorageBundle\Handler\MediaHandler

    ped_storage.amazon_public_url_resolver.class:    Gaufrette\Extras\Resolvable\Resolver\AwsS3PublicUrlResolver
    ped_storage.amazon_presigned_url_resolver.class: Gaufrette\Extras\Resolvable\Resolver\AwsS3PresignedUrlResolver
    ped_storage.amazon_static_url_resolver.class:    Gaufrette\Extras\Resolvable\Resolver\StaticUrlResolver

    ped_storage.imagine.cache.resolver.local.class:  Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver
    ped_storage.imagine.cache.resolver.aws_s3.class: Liip\ImagineBundle\Imagine\Cache\Resolver\AwsS3Resolver
    ped_storage.imagine.binary.loader.stream.class:  Liip\ImagineBundle\Binary\Loader\StreamLoader

services:
    expire_at_datetime:
        class: "%datetime.class%"
        arguments: ["%ped_storage.amazon_s3.expire_at%"]

    ped_storage.aws_s3.client:
        class: "%ped_storage.aws_s3.client.class%"
        factory: ["%ped_storage.aws_s3.client.class%", "factory"]
        arguments:
            -
                version:    latest
                region:     "%ped_storage.amazon_s3.region%"
                endpoint:   "%ped_storage.amazon_s3.endpoint%"
                credentials:
                    key:    "%ped_storage.amazon_s3.key%"
                    secret: "%ped_storage.amazon_s3.secret%"

    ped_storage.amazon_media_handler:
        class: "%ped_storage.media_handler.class%"
        arguments:
            $filesystem: '@amazon_fs'
            $liipCacheManager: '@liip_imagine.cache.manager'
        calls:
            - method: setAwsS3Resolver
              arguments:
                  - '@ped_storage.amazon_public_url_resolver'
        public: true

    ped_storage.local_media_handler:
        class: "%ped_storage.media_handler.class%"
        arguments:
            $filesystem: '@local_fs'
            $liipCacheManager: '@liip_imagine.cache.manager'
        calls:
            - method: setLocalEndpoint
              arguments:
                  - '%ped_storage.local.endpoint%'
        public: true

    ped_storage.amazon_public_url_resolver:
        class: "%ped_storage.amazon_public_url_resolver.class%"
        arguments:
            - '@ped_storage.aws_s3.client'
            - "%ped_storage.amazon_s3.bucket_name%"
            - "%ped_storage.amazon_s3.directory%"

    ped_storage.amazon_presigned_url_resolver:
        class: "%ped_storage.amazon_presigned_url_resolver.class%"
        arguments:
            - '@ped_storage.aws_s3.client'
            - "%ped_storage.amazon_s3.bucket_name%"
            - "%ped_storage.amazon_s3.directory%"
            - "@expire_at_datetime"

    ped_storage.amazon_static_url_resolver:
        class: "%ped_storage.amazon_static_url_resolver.class%"
        arguments:
            - "%ped_storage.amazon_s3.directory%"

    ped_storage.imagine.cache.resolver.local:
        class: "%ped_storage.imagine.cache.resolver.local.class%"
        arguments:
            - '@filesystem'
            - '@router.request_context'
            - '%kernel.root_dir%/../web'
            - '%ped_storage.local.thumbs_prefix%'
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: local_fs }

    ped_storage.imagine.binary.loader.local:
        class: "%ped_storage.imagine.binary.loader.stream.class%"
        arguments:
            - 'pedstorage://local_fs/'
        tags:
            - { name: 'liip_imagine.binary.loader', loader: loader_local_data }

    ped_storage.imagine.cache.resolver.aws_s3:
        class: "%ped_storage.imagine.cache.resolver.aws_s3.class%"
        arguments:
            - '@ped_storage.aws_s3.client'
            - "%ped_storage.amazon_s3.bucket_name%"
        calls:
            - method: setCachePrefix
              arguments:
                  - '%ped_storage.amazon_s3.thumbs_prefix%'
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: amazon_fs }

    ped_storage.imagine.binary.loader.aws_s3:
        class: "%ped_storage.imagine.binary.loader.stream.class%"
        arguments:
            - 'pedstorage://amazon_fs/'
        tags:
            - { name: 'liip_imagine.binary.loader', loader: loader_amazon_data }