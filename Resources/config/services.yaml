parameters:
    ped_storage.uploader: 'ped_storage.local_media_handler'

services:
    expire_at_datetime:
        class: 'DateTime'
        arguments: ['%ped_storage.amazon_s3.expire_at%']

    ped_storage.aws_s3.client:
        class: 'Aws\S3\S3Client'
        factory: ['Aws\S3\S3Client', 'factory']
        arguments:
            -
                version:    latest
                region:     '%ped_storage.amazon_s3.region%'
                endpoint:   '%ped_storage.amazon_s3.endpoint%'
                credentials:
                    key:    '%ped_storage.amazon_s3.key%'
                    secret: '%ped_storage.amazon_s3.secret%'

    ped_storage.amazon_media_handler:
        class: 'PaneeDesign\StorageBundle\Handler\MediaHandler'
        arguments:
            $filesystem: '@amazon_fs'
            $liipCacheManager: '@liip_imagine.cache.manager'
        calls:
            -   method: setAwsS3Resolver
                arguments:
                    - '@ped_storage.amazon_public_url_resolver'
        public: true

    ped_storage.local_media_handler:
        class: 'PaneeDesign\StorageBundle\Handler\MediaHandler'
        arguments:
            $filesystem: '@local_fs'
            $liipCacheManager: '@liip_imagine.cache.manager'
        calls:
            -   method: setLocalEndpoint
                arguments:
                    - '%ped_storage.local.endpoint%'
        public: true

    ped_storage.amazon_public_url_resolver:
        class: 'Gaufrette\Extras\Resolvable\Resolver\AwsS3PublicUrlResolver'
        arguments:
            $service: '@Aws\S3\S3Client'
            $bucket: '%ped_storage.amazon_s3.bucket_name%'
            $baseDir: '%ped_storage.amazon_s3.directory%'

    ped_storage.amazon_presigned_url_resolver:
        class: 'Gaufrette\Extras\Resolvable\Resolver\AwsS3PresignedUrlResolver'
        arguments:
            $service: '@Aws\S3\S3Client'
            $bucket: '%ped_storage.amazon_s3.bucket_name%'
            $baseDir: '%ped_storage.amazon_s3.directory%'
            $expiresAt: '@expire_at_datetime'

    ped_storage.amazon_static_url_resolver:
        class: 'Gaufrette\Extras\Resolvable\Resolver\StaticUrlResolver'
        arguments:
            $prefix: '%ped_storage.amazon_s3.directory%'

    ped_storage.imagine.cache.resolver.local:
        class: 'Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver'
        arguments:
            $filesystem: '@filesystem'
            $requestContext: '@router.request_context'
            $webRoot: '%ped_storage.local.web_root_dir%'
            $cachePrefix: '%ped_storage.local.thumbs_prefix%'
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: local_fs }

    ped_storage.imagine.binary.loader.local:
        class: 'Liip\ImagineBundle\Binary\Loader\StreamLoader'
        arguments:
            $wrapperPrefix: 'pedstorage://local_fs/'
        tags:
            - { name: 'liip_imagine.binary.loader', loader: loader_local_data }

    ped_storage.imagine.cache.resolver.aws_s3:
        class: 'Liip\ImagineBundle\Imagine\Cache\Resolver\AwsS3Resolver'
        arguments:
            $storage: '@Aws\S3\S3Client'
            $bucket: '%ped_storage.amazon_s3.bucket_name%'
        calls:
            - method: setCachePrefix
              arguments:
                  - '%ped_storage.amazon_s3.thumbs_prefix%'
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: amazon_fs }

    ped_storage.imagine.binary.loader.aws_s3:
        class: 'Liip\ImagineBundle\Binary\Loader\StreamLoader'
        arguments:
            $wrapperPrefix: 'pedstorage://amazon_fs/'
        tags:
            - { name: 'liip_imagine.binary.loader', loader: loader_amazon_data }

    PaneeDesign\StorageBundle\Twig\MediaExtension:
        public: true
        tags: [twig.extension]
        arguments:
            $container: '@service_container'
            $router: '@router.default'

    PaneeDesign\StorageBundle\Controller\MediaController:
        public: true
        tags: [controller.service_arguments]
        arguments:
            $uploader: "@=service(container.getParameter('ped_storage.uploader'))"
            $filterService: '@liip_imagine.service.filter'
